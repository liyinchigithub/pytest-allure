{
  "uid" : "8c3b22f25da5ce0e",
  "name" : "test_baidu_search[http://www.bing.com-必应搜索]",
  "fullName" : "test_selenium#test_baidu_search",
  "historyId" : "ebf633e126f3ec3e41cc1a8e65e6d598",
  "time" : {
    "start" : 1642927098653,
    "stop" : 1642927098683,
    "duration" : 30
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.WebDriverException: Message: chrome not reachable\n  (Session info: chrome=97.0.4692.99)\nStacktrace:\n0   chromedriver                        0x000000010d902e69 chromedriver + 5160553\n1   chromedriver                        0x000000010d88d593 chromedriver + 4679059\n2   chromedriver                        0x000000010d44117f chromedriver + 172415\n3   chromedriver                        0x000000010d42f732 chromedriver + 100146\n4   chromedriver                        0x000000010d4300c5 chromedriver + 102597\n5   chromedriver                        0x000000010d431eb2 chromedriver + 110258\n6   chromedriver                        0x000000010d42aba2 chromedriver + 80802\n7   chromedriver                        0x000000010d442753 chromedriver + 178003\n8   chromedriver                        0x000000010d4a675c chromedriver + 587612\n9   chromedriver                        0x000000010d494623 chromedriver + 513571\n10  chromedriver                        0x000000010d469dce chromedriver + 339406\n11  chromedriver                        0x000000010d46b105 chromedriver + 344325\n12  chromedriver                        0x000000010d8be23e chromedriver + 4878910\n13  chromedriver                        0x000000010d8d5d17 chromedriver + 4975895\n14  chromedriver                        0x000000010d8dba3f chromedriver + 4999743\n15  chromedriver                        0x000000010d8d661a chromedriver + 4978202\n16  chromedriver                        0x000000010d8b2bb1 chromedriver + 4832177\n17  chromedriver                        0x000000010d8f2fd8 chromedriver + 5095384\n18  chromedriver                        0x000000010d8f3161 chromedriver + 5095777\n19  chromedriver                        0x000000010d90a2a8 chromedriver + 5190312\n20  libsystem_pthread.dylib             0x00007fff2034f954 _pthread_start + 224\n21  libsystem_pthread.dylib             0x00007fff2034b4a7 thread_start + 15",
  "statusTrace" : "url = 'http://www.bing.com', search_text = '必应搜索'\n\n    @pytest.mark.parametrize(\"url,search_text\", data)\n    def test_baidu_search(url, search_text):\n>       driver.maximize_window()\n\ntest_selenium.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:984: in maximize_window\n    self.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f850737ce10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"chrome not reachable\",\"message\":\"chrome not reachable\\\\n  (Session info: ...fff2034f954 _pthread_start + 224\\\\n21  libsystem_pthread.dylib             0x00007fff2034b4a7 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: chrome not reachable\nE         (Session info: chrome=97.0.4692.99)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010d902e69 chromedriver + 5160553\nE       1   chromedriver                        0x000000010d88d593 chromedriver + 4679059\nE       2   chromedriver                        0x000000010d44117f chromedriver + 172415\nE       3   chromedriver                        0x000000010d42f732 chromedriver + 100146\nE       4   chromedriver                        0x000000010d4300c5 chromedriver + 102597\nE       5   chromedriver                        0x000000010d431eb2 chromedriver + 110258\nE       6   chromedriver                        0x000000010d42aba2 chromedriver + 80802\nE       7   chromedriver                        0x000000010d442753 chromedriver + 178003\nE       8   chromedriver                        0x000000010d4a675c chromedriver + 587612\nE       9   chromedriver                        0x000000010d494623 chromedriver + 513571\nE       10  chromedriver                        0x000000010d469dce chromedriver + 339406\nE       11  chromedriver                        0x000000010d46b105 chromedriver + 344325\nE       12  chromedriver                        0x000000010d8be23e chromedriver + 4878910\nE       13  chromedriver                        0x000000010d8d5d17 chromedriver + 4975895\nE       14  chromedriver                        0x000000010d8dba3f chromedriver + 4999743\nE       15  chromedriver                        0x000000010d8d661a chromedriver + 4978202\nE       16  chromedriver                        0x000000010d8b2bb1 chromedriver + 4832177\nE       17  chromedriver                        0x000000010d8f2fd8 chromedriver + 5095384\nE       18  chromedriver                        0x000000010d8f3161 chromedriver + 5095777\nE       19  chromedriver                        0x000000010d90a2a8 chromedriver + 5190312\nE       20  libsystem_pthread.dylib             0x00007fff2034f954 _pthread_start + 224\nE       21  libsystem_pthread.dylib             0x00007fff2034b4a7 thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_selenium"
  }, {
    "name" : "host",
    "value" : "liyinchideMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "68591-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_selenium"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "search_text",
    "value" : "'必应搜索'"
  }, {
    "name" : "url",
    "value" : "'http://www.bing.com'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "8c3b22f25da5ce0e.json",
  "parameterValues" : [ "'必应搜索'", "'http://www.bing.com'" ]
}